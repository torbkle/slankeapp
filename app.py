import streamlit as st
from m√•ltidslogikk import generer_dagsplan, fordel_kalorier
from supabase_klient import (
    test_tilkobling,
    registrer_vekt_db,
    hent_vektlogg_db
)
from datetime import date
import pandas as pd
import matplotlib.pyplot as plt

st.set_page_config(page_title="Slankeapp", page_icon="üçΩÔ∏è")

# Supabase-status
if test_tilkobling():
    st.success("‚úÖ Supabase-tilkobling aktiv")
else:
    st.error("‚ùå Klarte ikke √• koble til Supabase ‚Äì sjekk Secrets eller tabellstruktur")

# Banner og intro
st.image("https://www.infera.no/wp-content/uploads/2025/10/slankeapp.png", use_container_width=True)
st.caption("Enkel kaloriguide som hjelper deg √• g√• ned i vekt, f√∏lge m√•let og holde budsjett.")
st.title("Slankeapp üçΩÔ∏è")
st.subheader("Din enkle kaloriguide")

# Brukerdata
st.write("### Personlig informasjon üßç")
kj√∏nn = st.radio("Kj√∏nn", ["Mann", "Kvinne"])
alder = st.number_input("Alder", min_value=10, max_value=100, step=1)
h√∏yde = st.number_input("H√∏yde (cm)", min_value=120.0, max_value=220.0, step=0.5)

# Vektm√•l
st.write("### Vektm√•l üéØ")
startvekt = st.number_input("Startvekt (kg)", min_value=40.0, max_value=200.0, step=0.1, format="%.1f")
m√•lvekt = st.number_input("M√•lvekt (kg)", min_value=40.0, max_value=200.0, step=0.1, format="%.1f")

# Beregn BMR og TDEE
def beregn_bmr(vekt, h√∏yde, alder, kj√∏nn):
    if kj√∏nn == "Mann":
        return 10 * vekt + 6.25 * h√∏yde - 5 * alder + 5
    else:
        return 10 * vekt + 6.25 * h√∏yde - 5 * alder - 161

if startvekt and h√∏yde and alder:
    bmr = beregn_bmr(startvekt, h√∏yde, alder, kj√∏nn)
    tdee = bmr * 1.4  # Moderat aktiv
    anbefalt_kalorim√•l = int(tdee - 500)
    st.write(f"üßÆ Beregnet BMR: {int(bmr)} kcal/dag")
    st.write(f"‚öôÔ∏è Estimert TDEE: {int(tdee)} kcal/dag")
    st.write(f"üéØ Anbefalt kaloriinntak for vektnedgang: {anbefalt_kalorim√•l} kcal/dag")
else:
    anbefalt_kalorim√•l = 1800

# Kaloriinntak
kalorim√•l = st.slider("Velg daglig kaloriinntak", 1200, 2500, anbefalt_kalorim√•l)

# Kalorifordeling
fordeling = fordel_kalorier(kalorim√•l)
st.write("### Kalorifordeling per m√•ltid")
for kategori, kcal in fordeling.items():
    st.write(f"{kategori}: {kcal} kcal")

# M√•ltidsplan
plan, total = generer_dagsplan(kalorim√•l)
st.write("### Dagens m√•ltidsforslag")
for m√•ltid in plan:
    st.markdown(f"**{m√•ltid['kategori']} ‚Äì {m√•ltid['navn']}**")
    st.write(f"{m√•ltid['kalorier']} kcal ‚Äì ca. kr {m√•ltid['pris']}")
    st.write(m√•ltid["oppskrift"])
    st.divider()
st.write(f"**Totalt kalorier i dag:** {total} kcal")

# Vektlogg
st.write("### Vektlogg üìâ")
dagens_vekt = st.number_input("Registrer dagens vekt (kg)", min_value=40.0, max_value=200.0, step=0.1)
bruker_id = "demo"  # Kan utvides med innlogging senere

if st.button("Lagre vekt"):
    registrer_vekt_db(bruker_id, str(date.today()), dagens_vekt)
    st.success(f"Vekt {dagens_vekt} kg lagret for {date.today()}")

data = hent_vektlogg_db(bruker_id)
df = pd.DataFrame(data)

if not df.empty:
    df["dato"] = pd.to_datetime(df["dato"])
    df = df.rename(columns={"dato": "Dato", "vekt": "Vekt"})
    st.line_chart(df.set_index("Dato")["Vekt"])
    st.write(df.tail())

    if startvekt > m√•lvekt:
        siste_vekt = df["Vekt"].iloc[-1]
        fremdrift = round((startvekt - siste_vekt) / (startvekt - m√•lvekt) * 100, 1)
        st.write(f"**Siste registrerte vekt:** {siste_vekt} kg")
        st.write(f"**M√•lvekt:** {m√•lvekt} kg")
        st.progress(fremdrift / 100)
        st.write(f"**Fremdrift mot m√•l:** {fremdrift}%")
    else:
        st.warning("Startvekten m√• v√¶re h√∏yere enn m√•lvekten for √• vise fremdrift og prognose.")
else:
    st.info("Ingen vektdata registrert enn√•.")
