import streamlit as st
from datetime import date
import pandas as pd
from m√•ltidslogikk import generer_dagsplan, fordel_kalorier
from supabase_klient import (
    test_tilkobling,
    registrer_vekt_db,
    hent_vektlogg_db,
    hent_unike_brukere,
    lagre_brukerinfo,
    hent_brukerinfo
)

st.set_page_config(page_title="Slankeapp", page_icon="üçΩÔ∏è")

# üîê Innlogging
st.title("Slankeapp üçΩÔ∏è")
st.caption("Din enkle kaloriguide for vektnedgang og m√•ltidsplanlegging.")

st.write("### Logg inn")
eksisterende_brukere = hent_unike_brukere()
valgt_bruker = st.selectbox("Velg eksisterende bruker", eksisterende_brukere)
ny_bruker = st.text_input("Eller skriv inn nytt brukernavn")
bruker_id = ny_bruker if ny_bruker else valgt_bruker
logg_inn = st.button("Logg inn")

if logg_inn and bruker_id:
    st.success(f"‚úÖ Logget inn som: {bruker_id}")

    # üîå Supabase-status
    if test_tilkobling():
        st.success("‚úÖ Supabase-tilkobling aktiv")
    else:
        st.error("‚ùå Klarte ikke √• koble til Supabase ‚Äì sjekk Secrets eller tabellstruktur")

    # üßç Personlig informasjon
    st.write("### Personlig informasjon")
    info = hent_brukerinfo(bruker_id)
    kj√∏nn = st.radio("Kj√∏nn", ["Mann", "Kvinne"], index=0 if not info else ["Mann", "Kvinne"].index(info["kj√∏nn"]))
    alder = st.number_input("Alder", min_value=10, max_value=100, step=1, value=info["alder"] if info else 30)
    h√∏yde = st.number_input("H√∏yde (cm)", min_value=120.0, max_value=220.0, step=0.5, value=info["h√∏yde"] if info else 175.0)

    # üéØ Vektm√•l
    st.write("### Vektm√•l")
    startvekt = st.number_input("Startvekt (kg)", min_value=40.0, max_value=200.0, step=0.1, value=info["startvekt"] if info else 90.0)
    m√•lvekt = st.number_input("M√•lvekt (kg)", min_value=40.0, max_value=200.0, step=0.1, value=info["m√•lvekt"] if info else 80.0)

    # üíæ Lagre brukerinfo
    if st.button("Oppdater profil"):
        brukerdata = {
            "bruker_id": bruker_id,
            "kj√∏nn": kj√∏nn,
            "alder": alder,
            "h√∏yde": h√∏yde,
            "startvekt": startvekt,
            "m√•lvekt": m√•lvekt
        }
        lagre_brukerinfo(brukerdata)
        st.success("‚úÖ Profil lagret")

    # üî¢ BMR og TDEE
    def beregn_bmr(vekt, h√∏yde, alder, kj√∏nn):
        if kj√∏nn == "Mann":
            return 10 * vekt + 6.25 * h√∏yde - 5 * alder + 5
        else:
            return 10 * vekt + 6.25 * h√∏yde - 5 * alder - 161

    bmr = beregn_bmr(startvekt, h√∏yde, alder, kj√∏nn)
    tdee = bmr * 1.4
    anbefalt_kalorim√•l = int(tdee - 500)
    st.write(f"üßÆ BMR: {int(bmr)} kcal/dag")
    st.write(f"‚öôÔ∏è TDEE: {int(tdee)} kcal/dag")
    st.write(f"üéØ Anbefalt kaloriinntak: {anbefalt_kalorim√•l} kcal/dag")

    # üçΩÔ∏è Kalorim√•l og m√•ltidsplan
    kalorim√•l = st.slider("Velg daglig kaloriinntak", 1200, 2500, anbefalt_kalorim√•l)
    fordeling = fordel_kalorier(kalorim√•l)
    st.write("### Kalorifordeling per m√•ltid")
    for kategori, kcal in fordeling.items():
        st.write(f"{kategori}: {kcal} kcal")

    plan, total = generer_dagsplan(kalorim√•l)
    st.write("### Dagens m√•ltidsforslag")
    for m√•ltid in plan:
        st.markdown(f"**{m√•ltid['kategori']} ‚Äì {m√•ltid['navn']}**")
        st.write(f"{m√•ltid['kalorier']} kcal ‚Äì ca. kr {m√•ltid['pris']}")
        st.write(m√•ltid["oppskrift"])
        st.divider()
    st.write(f"**Totalt kalorier i dag:** {total} kcal")

    # üìâ Vektlogg
    st.write("### Vektlogg")
    dagens_vekt = st.number_input("Registrer dagens vekt (kg)", min_value=40.0, max_value=200.0, step=0.1)

    if st.button("Lagre vekt"):
        registrer_vekt_db(bruker_id, str(date.today()), dagens_vekt)
        st.success(f"Vekt {dagens_vekt} kg lagret for {date.today()}")

    # üîç Testvisning av vektdata
    st.write(f"üîç Bruker-ID: {bruker_id}")
    st.write(f"üì¶ Vektdata: {hent_vektlogg_db(bruker_id)}")

    data = hent_vektlogg_db(bruker_id)
    df = pd.DataFrame(data)

    if not df.empty:
        df["dato"] = pd.to_datetime(df["dato"])
        df = df.rename(columns={"dato": "Dato", "vekt": "Vekt"})
        st.line_chart(df.set_index("Dato")["Vekt"])
        st.write(df.tail())

        if startvekt > m√•lvekt:
            siste_vekt = df["Vekt"].iloc[-1]
            fremdrift = round((startvekt - siste_vekt) / (startvekt - m√•lvekt) * 100, 1)
            st.write(f"**Siste registrerte vekt:** {siste_vekt} kg")
            st.write(f"**M√•lvekt:** {m√•lvekt} kg")
            st.progress(fremdrift / 100)
            st.write(f"**Fremdrift mot m√•l:** {fremdrift}%")
        else:
            st.warning("Startvekten m√• v√¶re h√∏yere enn m√•lvekten for √• vise fremdrift.")
    else:
        st.info("Ingen vektdata registrert enn√•.")

    # üìä Mini-dashboard
    st.write("### üìä Fremdrift for alle brukere")
    total_fremdrift = 0
    gyldige_brukere = 0

    for bruker in eksisterende_brukere:
        logg = hent_vektlogg_db(bruker)
        if logg:
            df_bruker = pd.DataFrame(logg)
            if "vekt" in df_bruker.columns and len(df_bruker) > 1:
                start = df_bruker["vekt"].iloc[0]
                slutt = df_bruker["vekt"].iloc[-1]
                if start > slutt:
                    fremdrift = (start - slutt) / start * 100
                    total_fremdrift += fremdrift
                    gyldige_brukere += 1

    if gyldige_brukere > 0:
        gjennomsnitt = round(total_fremdrift / gyldige_brukere, 1)
        st.metric("Gjennomsnittlig fremdrift", f"{gjennomsnitt}%")
    else:
        st.info("Ingen brukere med gyldig fremdrift registrert enn√•.")

else:
    st.info("Skriv inn brukernavn og trykk 'Logg inn' for √• starte.")
